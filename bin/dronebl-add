#!/usr/bin/env python3

from argparse import ArgumentParser
from datetime import datetime
from io       import StringIO
from os       import environ, path
from sys      import exit, stderr, stdin, stdout
from typing   import Optional, Tuple

from dronebl  import DroneBL

def _lookup(
        key:  str,
        ip:   str,
        type: int
        ) -> Optional[Tuple[datetime, str]]:
    d    = DroneBL(key)
    look = d.lookup(ip, type)
    if look:
        return (look[0].datetime, look[0].comment)
    else:
        return None

def _ip_port(
        host: str,
        port: Optional[int]
        ) -> Tuple[str, Optional[int]]:
    if host.startswith("[") and "]" in host:
        ip, port_s = host[1:].split("]", 1)
        port_s     = port_s.lstrip(":")
    else:
        ip, _, port_s = host.partition(":")
    return (ip, int(port_s) if port_s else port)

def main():
    parser = ArgumentParser(
        description="BAD IP ADDRESS RAH")
    parser.add_argument("key", type=str)
    parser.add_argument("type", type=int)
    parser.add_argument("comment")
    parser.add_argument("input", help="<ip>[:<port>] or - (stdin)")
    parser.add_argument("--port",  "-p", type=int)
    parser.add_argument("--quiet", "-q", action="store_true")
    parser.add_argument("--batch", "-b", type=int)
    args = parser.parse_args()

    key = args.key
    if key == "-":
        if "DBLKEY" in environ:
            key = environ["DBLKEY"]
        else:
            stderr.write("key not found in env\n")
            exit(1)
    else:
        key_path = path.expanduser(key)
        if path.isfile(key_path):
            with open(key_path) as key_file:
                key = key_file.read().strip()
        else:
            stderr.write("key file non-existent\n")
            exit(2)

    if args.input == "-":
        infile = stdin
    else:
        infile = StringIO(args.input)

    drone = DroneBL(key)
    items: List[Tuple[str, Optional[int]]] = []
    for line in iter(infile.readline, ""):
        line = line.strip()

        ip, port = _ip_port(line, args.port)
        look     = _lookup(key, ip, args.type)

        if look is not None:
            dt, msg = look
            stderr.write(f"= {ip} already exists: [{dt.isoformat()}] {msg}\n")
            stderr.flush()
        else:
            items.append((ip, port))

    stdout.write("\n")

    batch_i = 5 if args.batch is None else args.batch
    for i in range(0, len(items), batch_i):
        batch  = items[i:i+batch_i]
        dbatch = drone.type_batch(args.type)
        for ip, port in batch:
            dbatch.add(ip, args.comment, port)

        outs   = drone.commit(dbatch)
        for i, (_, id, message) in enumerate(outs):
            ip, port = batch[i]
            host = ip
            if port is not None:
                host += f":{port}"

            if id is None:
                stderr.write(f"- {host} failed to list: {message}\n")
                stderr.flush()
            elif not args.quiet:
                stdout.write(f"+ [{id}] {host} listed as {args.type}\n")
                stdout.flush()

if __name__ == "__main__":
    main()
