#!/usr/bin/env python3

from argparse import ArgumentParser
from datetime import datetime
from sys      import exit, stderr, stdin, stdout
from typing   import Optional, Tuple

from dronebl  import DroneBL

def _add(
        key:     str,
        ip:      str,
        type:    int,
        comment: str,
        port:    Optional[int]
        ) -> Tuple[Optional[int], str]:
    d = DroneBL(key)
    id, msg = d.add(ip, type, comment, port)
    return (id, msg)

def _lookup(
        key:  str,
        ip:   str,
        type: int
        ) -> Optional[Tuple[datetime, str]]:
    d    = DroneBL(key)
    look = d.lookup(ip, type)
    if look is not None:
        return (look.datetime, look.comment)
    else:
        return None

def _ip_port(
        host: str,
        port: Optional[int]
        ) -> Optional[int]:
    ip, _, port_s = host.partition(":")
    return (ip, int(port_s) if port_s else port)

def _print(
        id:    Optional[int],
        msg:   str,
        ip:    str,
        port:  Optional[int],
        type:  int,
        quiet: bool):
    host = ip
    if port is not None:
        host += f":{port}"

    if id is not None:
        if not quiet:
            stdout.write(f"+ added {id} - {host}\n")
            stdout.flush()
    else:
        stderr.write(f"! failed to add {host}: {msg}\n")
        stderr.flush()

def _single(
        key:     str,
        input:   str,
        port:    Optional[int],
        type:    int,
        comment: str,
        quiet:   bool):
    ip, port = _ip_port(input, port)
    look     = _lookup(key, ip, type)

    if look is not None:
        dt, msg = look
        stderr.write(f"= {ip} already exists: [{dt.isoformat()}] {msg}\n")
        stderr.flush()
    else:
        id, msg  = _add(key, ip, type, comment, port)
        _print(id, msg, ip, port, type, quiet)

def main():
    # $ dronebl `cat .dronebl` 19 "VPNGate server (connect verified)" - -p 1337
    parser = ArgumentParser(
        description="BAD IP ADDRESS RAH")
    parser.add_argument("key")
    parser.add_argument("type", type=int)
    parser.add_argument("comment")
    parser.add_argument("input", help="<ip>[:<port>] or - (stdin)")
    parser.add_argument("--port", "-p", type=int)
    parser.add_argument("--quiet", "-q", action="store_true")
    args = parser.parse_args()

    if args.input == "-":
        for line in iter(stdin.readline, ""):
            line = line.strip()
            _single(args.key, line, args.port, args.type, args.comment,
                args.quiet)
    else:
        _single(args.key, args.input, args.port, args.type, args.comment,
            args.quiet)

if __name__ == "__main__":
    main()
