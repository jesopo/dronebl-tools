#!/usr/bin/env python3

from argparse import ArgumentParser
from datetime import datetime
from os       import environ, path
from sys      import exit, stderr, stdin, stdout
from typing   import Optional, Tuple

from dronebl  import DroneBL

def _add(
        key:     str,
        ip:      str,
        type:    int,
        comment: str,
        port:    Optional[int]
        ) -> Tuple[Optional[int], str]:
    d = DroneBL(key)
    id, msg = d.add(ip, type, comment, port)
    return (id, msg)

def _lookup(
        key:  str,
        ip:   str,
        type: int
        ) -> Optional[Tuple[datetime, str]]:
    d    = DroneBL(key)
    look = d.lookup(ip, type)
    if look:
        return (look[0].datetime, look[0].comment)
    else:
        return None

def _ip_port(
        host: str,
        port: Optional[int]
        ) -> Tuple[str, Optional[int]]:
    if host.startswith("[") and "]" in host:
        ip, port_s = host[1:].split("]", 1)
        port_s     = port_s.lstrip(":")
    else:
        ip, _, port_s = host.partition(":")
    return (ip, int(port_s) if port_s else port)

def _print(
        id:    Optional[int],
        msg:   str,
        ip:    str,
        port:  Optional[int],
        type:  int,
        quiet: bool):
    host = ip
    if port is not None:
        host += f":{port}"

    if id is not None:
        if not quiet:
            stdout.write(f"+ added {id} - {host}\n")
            stdout.flush()
    else:
        stderr.write(f"! failed to add {host}: {msg}\n")
        stderr.flush()

def _single(
        key:     str,
        input:   str,
        port:    Optional[int],
        type:    int,
        comment: str,
        quiet:   bool):
    ip, port = _ip_port(input, port)
    look     = _lookup(key, ip, type)

    if look is not None:
        dt, msg = look
        stderr.write(f"= {ip} already exists: [{dt.isoformat()}] {msg}\n")
        stderr.flush()
    else:
        id, msg  = _add(key, ip, type, comment, port)
        _print(id, msg, ip, port, type, quiet)

def main():
    parser = ArgumentParser(
        description="BAD IP ADDRESS RAH")
    parser.add_argument("key", type=str)
    parser.add_argument("type", type=int)
    parser.add_argument("comment")
    parser.add_argument("input", help="<ip>[:<port>] or - (stdin)")
    parser.add_argument("--port", "-p", type=int)
    parser.add_argument("--quiet", "-q", action="store_true")
    args = parser.parse_args()

    key = args.key
    if key == "-":
        if "DBLKEY" in environ:
            key = environ["DBLKEY"]
        else:
            stderr.write("key not found in env\n")
            exit(1)
    else:
        key_path = path.expanduser(key)
        if path.isfile(key_path):
            with open(key_path) as key_file:
                key = key_file.read().strip()
        else:
            stderr.write("key file non-existent\n")
            exit(2)

    if args.input == "-":
        for line in iter(stdin.readline, ""):
            line = line.strip()
            _single(key, line, args.port, args.type, args.comment,
                args.quiet)
    else:
        _single(key, args.input, args.port, args.type, args.comment,
            args.quiet)

if __name__ == "__main__":
    main()
